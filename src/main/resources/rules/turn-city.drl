//created on: Feb 3, 2014
package cz.muni.fi.civ.newohybat.drools.rules

dialect "mvel"

//list any import classes here.
import cz.muni.fi.civ.newohybat.persistence.facade.dto.CityDTO;
import cz.muni.fi.civ.newohybat.persistence.facade.dto.TileDTO;
import cz.muni.fi.civ.newohybat.persistence.facade.dto.UnitDTO;
import cz.muni.fi.civ.newohybat.persistence.facade.dto.CityImprovementDTO;
import cz.muni.fi.civ.newohybat.persistence.facade.dto.TileImprovementDTO;
import cz.muni.fi.civ.newohybat.persistence.facade.dto.TerrainDTO;
import cz.muni.fi.civ.newohybat.persistence.facade.dto.SpecialDTO;
import cz.muni.fi.civ.newohybat.persistence.facade.dto.PlayerDTO;
import cz.muni.fi.civ.newohybat.persistence.facade.dto.GovernmentDTO;
import cz.muni.fi.civ.newohybat.persistence.facade.dto.UnitTypeDTO;

import cz.muni.fi.civ.newohybat.drools.events.TurnEvent;
import cz.muni.fi.civ.newohybat.drools.events.CityImprovementEvent;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.HashSet;


//declare any global variables here

global Integer foodStockLimit
global ArrayList<Long> unitsToDisband

rule "Update Productions For Added City"
	when
		CityDTO(
			$cityId:id
		) @watch(!*)
	then
		insertLogical(new UpdateCityProduction($cityId))
		insertLogical(new CityImprovementChange($cityId))
end

rule "Update Productions On New Improvement"
	when 
		CityDTO(
			$cityId:id
		)
		CityImprovementEvent(
			cityId==$cityId
		) from entry-point "ActionCompletedStream"
	then
		insertLogical(new UpdateCityProduction($cityId))
		insertLogical(new CityImprovementChange($cityId))
end

rule "Get City Disorder"
	ruleflow-group "cityMood"
	dialect "mvel"
	no-loop
    when
        $city : CityDTO (
        	peopleUnhappy > peopleHappy
        ) @watch(peopleUnhappy, peopleHappy)
    then
        modify($city) {
		   setDisorder(true)
		};
end

rule "Get City We Love Ruler Day"
	dialect "mvel"
	ruleflow-group "cityMood"
	no-loop
	when
		$city : CityDTO(
			size>=3, peopleUnhappy==0
			, peopleHappy>= (peopleContent + peopleEntertainers+ peopleTaxmen+ peopleScientists)
		) @watch(size, peopleUnhappy, peopleContent, peopleEntertainers, peopleTaxmen, peopleScientists)
	then
		modify($city){
			setWeLoveDay(true);
		};
end

rule "Tile With Enemy Unit Is Not Managed Anymore"
	dialect "mvel"
	ruleflow-group "updateCityTiles"
	no-loop
    when
        $city:CityDTO (
        	$tiles:managedTiles
        	, $cityOwner: owner
        	, $peopleEntertainers:peopleEntertainers
        ) @watch(owner)
        UnitDTO(
        	tile memberOf $tiles
        	,$tile:tile
        	, owner != $cityOwner
        )
    then
    	modify($city) {
        	getManagedTiles().remove($tile),
        	setPeopleEntertainers($peopleEntertainers + 1)
		};
end


rule "City Improvements Upkeep"
	dialect "mvel"
	ruleflow-group "manageConsumptions"
	no-loop
	when
		$city: CityDTO(
			$improvements:improvements
			,$cityId:id
		)
		accumulate(
			CityImprovementDTO(
				ident memberOf $improvements
				,$upkeepCost:upkeepCost
			)
			, $sumUpkeep:sum($upkeepCost)
		)
		CityImprovementChange(
			cityId==$cityId
		)
	then
		modify($city){
			setImprovementsUpkeep($sumUpkeep)
		}
end

rule "Basic City Tiles Production"
	dialect "mvel"
	ruleflow-group "manageProductions"
	activation-group "cityProduction"
	when
		$city:CityDTO(
			$managedTiles:managedTiles
			,$cityId:id
		)
		accumulate(
					TileDTO (
							id memberOf $managedTiles
							,$foodProd:foodProduction
							,$resourcesProd:resourcesProduction
							,$tradeProd:tradeProduction
					) @watch(foodProduction,resourcesProduction,tradeProduction)
					,$sumFood : sum($foodProd)
					,$sumResources : sum($resourcesProd)
					,$sumTrade : sum($tradeProd)
					,$tiles:collectList($foodProd)
		)
		UpdateCityProduction(cityId==$cityId)
	then
		modify($city){
			setFoodProduction($sumFood)
			,setResourcesProduction($sumResources)
			,setTradeProduction($sumTrade)
		}
		System.out.println($tiles)
end

rule "Trade To Luxuries/Taxes/Research Resolution"
	dialect "mvel"
	ruleflow-group "manageSurpluses"
	salience 10 // before luxuries, taxes, research are worked with
	when
		$city:CityDTO(
			$tradeProduction:tradeProduction
			,$ownerId:owner
		) @watch(tradeProduction)
		PlayerDTO(
			id==$ownerId
			, $taxesRatio:taxesRatio
			, $luxuriesRatio:luxuriesRatio
			, $researchRatio:researchRatio
		) @watch(taxesRatio, luxuriesRatio, researchRatio)
	then
		$luxuriesAmount = (Integer)Math.floor((double)$tradeProduction * $luxuriesRatio/100)
		$taxesAmount = (Integer)Math.floor((double)$tradeProduction * $taxesRatio/100)
		$researchAmount = $tradeProduction - $luxuriesAmount - $taxesAmount
		modify($city){
			setLuxuriesAmount($luxuriesAmount)
			,setTaxesAmount($taxesAmount)
			,setResearchAmount($researchAmount)
		}
end

rule "Taxes Surplus To Treasury"
	dialect "mvel"
	ruleflow-group "manageSurpluses"
	when
		$city: CityDTO(
			$ownerId:owner
			, taxesAmount > improvementsUpkeep
			, $taxesIncome: taxesAmount
			, $improvementsUpkeep: improvementsUpkeep
		)
		$owner: PlayerDTO(
			id==$ownerId
			, $treasury: treasury			
		)
		TurnEvent() from entry-point "GameControlStream"
	then
		modify($owner){
			setTreasury($treasury + ($taxesIncome-$improvementsUpkeep))
		}
end

rule "Taxes Shortage Covered From Treasury"
	dialect "mvel"
	ruleflow-group "manageSurpluses"
	when
		$city: CityDTO(
			$ownerId:owner
			, taxesAmount < improvementsUpkeep
			, $taxesIncome: taxesAmount
			, $improvementsUpkeep: improvementsUpkeep
		)
		$owner: PlayerDTO(
			id==$ownerId
			, treasury >= ($improvementsUpkeep-$taxesIncome)
			, $treasury: treasury			
		)
		TurnEvent() from entry-point "GameControlStream"
	then
		modify($owner){
			setTreasury($treasury + ($taxesIncome-$improvementsUpkeep))
		}
end

rule "Taxes Shortage Not Covered From Treasury"
	dialect "mvel"
	ruleflow-group "manageSurpluses"
	no-loop
	when
		$city: CityDTO(
			$ownerId:owner
			, taxesAmount < improvementsUpkeep
			, $taxesIncome: taxesAmount
			, $improvementsUpkeep: improvementsUpkeep
			, $improvements: improvements
		)
		$owner: PlayerDTO(
			id==$ownerId
			, treasury < ($improvementsUpkeep-$taxesIncome)
			, $treasury: treasury			
		)
		TurnEvent() from entry-point "GameControlStream"
	then
		// set treasury to zero and remove one improvement
		modify($owner){
			setTreasury(0)
		}
		$list = new ArrayList($improvements)
		$list.remove(0)
		modify($city){
			setImprovements(new HashSet($list))
		}
end

rule "Research Of City To Global"
	dialect "mvel"
	ruleflow-group "manageSurpluses"
	salience -5 // lesser than effects of city improvements
	when
		$city: CityDTO(
			$ownerId:owner
			,researchAmount>0
			,$researchAmount: researchAmount
		)
		$owner: PlayerDTO(
			id==$ownerId
			, $globalResearch: research			
		)
		TurnEvent() from entry-point "GameControlStream"
	then
		modify($owner){
			setResearch($globalResearch + $researchAmount)
		}
end

rule "Population Point Requires 2 Food Units"
	dialect "mvel"
	ruleflow-group "manageConsumptions"
	when
		$city: CityDTO(
			$size: size
			, $foodConsumption:foodConsumption
		)@watch(size)
	then
		modify($city){
			setFoodConsumption($foodConsumption + $size*2)
		}
end

rule "Food Surplus To Stock"
	dialect "mvel"
	ruleflow-group "manageSurpluses"
	when
		$city: CityDTO(
			$ownerId:owner
			, foodProduction > foodConsumption
			, $foodProduction : foodProduction
			, $foodConsumption : foodConsumption
			, $foodStock : foodStock
		) @watch(foodProduction,foodConsumption)
		TurnEvent() from entry-point "GameControlStream"
	then
		modify($city){
			setFoodStock($foodStock + ($foodProduction-$foodConsumption))
		}
end

rule "Food Shortage Not Covered From Stock"
	dialect "mvel"
	ruleflow-group "affectPopulation"
	no-loop true
	when
		$city: CityDTO(
			$ownerId:owner
			, foodProduction < foodConsumption
			, foodStock < (foodConsumption - foodProduction)
			, $foodProduction : foodProduction
			, $foodConsumption : foodConsumption
			, $foodStock : foodStock
			, $size: size
		)
		TurnEvent() from entry-point "GameControlStream"
	then
		modify($city){
			setFoodStock(0)
			,setSize($size-1) 
		}
end

rule "Food Stock Overflows Expand City"
	dialect "mvel"
	ruleflow-group "affectPopulation"
	activation-group "expandCity"
	when
		$city: CityDTO(
			foodStock>=foodStockLimit
			,$foodStock:foodStock
			,$size:size
			,$peopleContent: peopleContent
		)
		TurnEvent() from entry-point "GameControlStream"
	then
		modify($city){
			setSize($size+1)
			,setFoodStock(0)
			,setPeopleContent($peopleContent+ 1)
		}
end

rule "Food Stock Overflows Expand City With Granary"
	dialect "mvel"
	ruleflow-group "affectPopulation"
	activation-group "expandCity"
	salience 5 // higher than of "Food Stock Overflows Expand City"
	when
		$city: CityDTO(
			foodStock>=foodStockLimit
			,$foodStock:foodStock
			,$size:size
			,$peopleContent: peopleContent
		)
		TurnEvent() from entry-point "GameControlStream"
	then
		modify($city){
			setSize($size+1)
			,setFoodStock((Integer)Math.floor(foodStockLimit*0.5))
			,setPeopleContent($peopleContent + 1)
		}
end

rule "Food Stock Overflows City Reached Population Limit Without Aqueduct"
	dialect "mvel"
	ruleflow-group "affectPopulation"
	activation-group "expandCity"
	salience 10 // higher than of "Food Stock Overflows Expand City" and "Food Stock Overflows Expand City With Granary"
	no-loop
	when
		$city: CityDTO(
			foodStock>=foodStockLimit
			,size>9
			,$foodStock:foodStock
			,$size:size
			,$peopleContent: peopleContent
			,improvements not contains "aqueduct"
		)
		TurnEvent() from entry-point "GameControlStream"
	then
		modify($city){
			setFoodStock(foodStockLimit)
		}
end

rule "Entertainers Increase Luxuries"
	dialect "mvel"
	ruleflow-group "manageSurpluses"
	salience 5 // after "Trade To Luxuries/Taxes/Research Resolution" and before city improvement effects
	no-loop
	when
		$city: CityDTO(
			peopleEntertainers>0
			,$peopleEntertainers:peopleEntertainers
			,$luxuriesAmount: luxuriesAmount
		) @watch(peopleEntertainers, luxuriesAmount)
	then
		modify($city){
			setLuxuriesAmount($luxuriesAmount + 2*$peopleEntertainers)
		}
end

rule "Taxmen Increase Taxes"
	dialect "mvel"
	ruleflow-group "manageSurpluses"
	salience 5 // after "Trade To Luxuries/Taxes/Research Resolution" and before city improvement effects
	no-loop
	when
		$city:CityDTO(
			peopleTaxmen>0
			, $peopleTaxmen:peopleTaxmen
			, $taxesAmount: taxesAmount
		) @watch(peopleTaxmen, taxesAmount)
	then
		modify($city){
			setTaxesAmount($taxesAmount + 2*$peopleTaxmen)
		}
end

rule "Scientists Increase Research"
	dialect "mvel"
	ruleflow-group "manageSurpluses"
	salience 5 // after "Trade To Luxuries/Taxes/Research Resolution" and before city improvement effects
	no-loop
	when
		$city: CityDTO(
			peopleScientists>0
			,$peopleScientists: peopleScientists
			,$researchAmount: researchAmount
		) @watch (peopleScientists, researchAmount)
	then
		modify($city){
			setResearchAmount($researchAmount + 2*$peopleScientists)
		}
end

rule "Luxuries Make People Happier"
	dialect "mvel"
	ruleflow-group "affectPopulation"
	when
		$city: CityDTO(
			luxuriesAmount>0
			,(peopleContent + peopleUnhappy) > 0
			,$luxuries: luxuriesAmount
			,$peopleHappy: peopleHappy
			,$peopleContent: peopleContent
			,$peopleUnhappy: peopleUnhappy
			,$luxuriesSpent: luxuriesSpent
		) @watch(luxuriesAmount)
	then
		$luxuriesEffect = (Integer)Math.floor($luxuries/2)
		$contentToHappy = Math.min($luxuriesEffect, $peopleContent)
		$restOfLuxuries = $luxuriesEffect - $contentToHappy
		$unhappyToContent = Math.min($restOfLuxuries, $peopleUnhappy)
		$restOfLuxuries = $restOfLuxuries - $unhappyToContent
		modify($city){
			setPeopleHappy($peopleHappy+ $contentToHappy)
			,setPeopleContent($peopleContent - $contentToHappy + $unhappyToContent)
			,setPeopleUnhappy($peopleUnhappy - $unhappyToContent)
			,setLuxuriesSpent(2*($contentToHappy+$unhappyToContent))
		}
end

rule "Support Of Units To Resources Consumption"
	dialect "mvel"
	ruleflow-group "manageConsumptions"
	when
		$city: CityDTO(
			$resourcesConsumption:resourcesConsumption
			,$unitsSupport: unitsSupport
		)@watch(unitsSupport)
	then
		modify($city){
			setResourcesConsumption($resourcesConsumption + $unitsSupport)
		}
end

rule "Resources Surplus"
	dialect "mvel"
	ruleflow-group "manageSurpluses"
	when
		$city: CityDTO(
			$resourcesProduction:resourcesProduction
			,$resourcesConsumption:unitsSupport
		) @watch(resourcesProduction, unitsSupport)
	then
		modify($city){
			setResourcesSurplus($resourcesProduction-$resourcesConsumption)
		}
end

rule "Resources Shortage Disband Farthest Unit"
	dialect "mvel"
	ruleflow-group "manageSurpluses"
	salience ($distanceHome)
	when
		$city: CityDTO(
			resourcesSurplus<0
			, unitsSupport>0
			, $resourcesSurplus:resourcesSurplus
			, $homeUnits:homeUnits
			, $unitsSupport: unitsSupport
		)
		$unit: UnitDTO(
			id memberOf $homeUnits
			, $id:id
			, $type:type
			, $distanceHome:distanceHome
		)
		UnitTypeDTO(
			ident==$type
			, military==true
		)
		TurnEvent() from entry-point "GameControlStream"
	then
		$homeUnits.remove($id)
		unitsToDisband.add($id)
		modify($city){
			setHomeUnits($homeUnits)
			, setResourcesSurplus($resourcesSurplus + 1)
		}
end